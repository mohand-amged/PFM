// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  password      String
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  subscriptions Subscription[]
  expenses      Expense[]
  savings       Saving[]
  wallet        Wallet?
  notifications Notification[]
  incomes       Income[]
  preferences   UserPreferences?
  budgets       Budget[]

  @@map("users")
}

model UserPreferences {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  emailNotifications    Boolean @default(false)
  pushNotifications     Boolean @default(false)
  reminderSevenDays     Boolean @default(true)
  reminderOneDay        Boolean @default(true)
  reminderSameDay       Boolean @default(false)
  weeklyDigest          Boolean @default(false)
  monthlyReport         Boolean @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String   @unique @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Subscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  billingDate DateTime
  categories  String[]
  description String?
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  amount      Float
  currency    String   @default("USD")
  date        DateTime
  category    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Saving {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  amount      Float
  currency    String   @default("USD")
  date        DateTime
  targetAmount Float?
  category    String?
  description String?
  isActive    Boolean  @default(true)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings")
}

model Wallet {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  balance         Float    @default(0)
  currency        String   @default("USD")
  monthlyBudget   Float?   @default(0)
  lastSalaryDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Income {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  source      String      // salary, freelance, bonus, etc.
  description String?
  type        IncomeType  @default(SALARY)
  date        DateTime
  currency    String      @default("USD")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  data      Json?            // Additional data like subscription ID, amount, etc.
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum IncomeType {
  SALARY
  FREELANCE
  BONUS
  INVESTMENT
  SIDE_HUSTLE
  OTHER
}

model Budget {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  category              String
  monthlyLimit          Float
  currency              String              @default("USD")
  alertThreshold        Float               @default(80) // Alert when 80% of budget is reached
  enableAlerts          Boolean             @default(true)
  isActive              Boolean             @default(true)
  month                 Int                 // 1-12 for month
  year                  Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  userId                String              @db.ObjectId
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, month, year])
  @@map("budgets")
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  SUBSCRIPTION_RENEWAL
  LOW_BALANCE
  GOAL_ACHIEVED
  BUDGET_EXCEEDED
  BUDGET_WARNING
}
